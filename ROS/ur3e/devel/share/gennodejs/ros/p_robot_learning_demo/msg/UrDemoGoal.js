// Auto-generated. Do not edit!

// (in-package p_robot_learning_demo.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class UrDemoGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.action_id = null;
      this.mode_id = null;
      this.urpos = null;
      this.gripper_val = null;
    }
    else {
      if (initObj.hasOwnProperty('action_id')) {
        this.action_id = initObj.action_id
      }
      else {
        this.action_id = 0;
      }
      if (initObj.hasOwnProperty('mode_id')) {
        this.mode_id = initObj.mode_id
      }
      else {
        this.mode_id = 0;
      }
      if (initObj.hasOwnProperty('urpos')) {
        this.urpos = initObj.urpos
      }
      else {
        this.urpos = [];
      }
      if (initObj.hasOwnProperty('gripper_val')) {
        this.gripper_val = initObj.gripper_val
      }
      else {
        this.gripper_val = [];
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type UrDemoGoal
    // Serialize message field [action_id]
    bufferOffset = _serializer.uint32(obj.action_id, buffer, bufferOffset);
    // Serialize message field [mode_id]
    bufferOffset = _serializer.uint32(obj.mode_id, buffer, bufferOffset);
    // Serialize message field [urpos]
    bufferOffset = _arraySerializer.float64(obj.urpos, buffer, bufferOffset, null);
    // Serialize message field [gripper_val]
    bufferOffset = _arraySerializer.float64(obj.gripper_val, buffer, bufferOffset, null);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type UrDemoGoal
    let len;
    let data = new UrDemoGoal(null);
    // Deserialize message field [action_id]
    data.action_id = _deserializer.uint32(buffer, bufferOffset);
    // Deserialize message field [mode_id]
    data.mode_id = _deserializer.uint32(buffer, bufferOffset);
    // Deserialize message field [urpos]
    data.urpos = _arrayDeserializer.float64(buffer, bufferOffset, null)
    // Deserialize message field [gripper_val]
    data.gripper_val = _arrayDeserializer.float64(buffer, bufferOffset, null)
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += 8 * object.urpos.length;
    length += 8 * object.gripper_val.length;
    return length + 16;
  }

  static datatype() {
    // Returns string type for a message object
    return 'p_robot_learning_demo/UrDemoGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '3e2e647b480d85b93a63fd7219d610b0';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Define the goal
    uint32 action_id  # Specify which dishwasher we want to use
    uint32 mode_id
    float64[] urpos
    float64[] gripper_val
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new UrDemoGoal(null);
    if (msg.action_id !== undefined) {
      resolved.action_id = msg.action_id;
    }
    else {
      resolved.action_id = 0
    }

    if (msg.mode_id !== undefined) {
      resolved.mode_id = msg.mode_id;
    }
    else {
      resolved.mode_id = 0
    }

    if (msg.urpos !== undefined) {
      resolved.urpos = msg.urpos;
    }
    else {
      resolved.urpos = []
    }

    if (msg.gripper_val !== undefined) {
      resolved.gripper_val = msg.gripper_val;
    }
    else {
      resolved.gripper_val = []
    }

    return resolved;
    }
};

module.exports = UrDemoGoal;
