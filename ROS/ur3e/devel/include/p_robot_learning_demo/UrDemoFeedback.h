// Generated by gencpp from file p_robot_learning_demo/UrDemoFeedback.msg
// DO NOT EDIT!


#ifndef P_ROBOT_LEARNING_DEMO_MESSAGE_URDEMOFEEDBACK_H
#define P_ROBOT_LEARNING_DEMO_MESSAGE_URDEMOFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace p_robot_learning_demo
{
template <class ContainerAllocator>
struct UrDemoFeedback_
{
  typedef UrDemoFeedback_<ContainerAllocator> Type;

  UrDemoFeedback_()
    : percent_complete(0.0)
    , urposf()
    , f1()  {
    }
  UrDemoFeedback_(const ContainerAllocator& _alloc)
    : percent_complete(0.0)
    , urposf(_alloc)
    , f1(_alloc)  {
  (void)_alloc;
    }



   typedef float _percent_complete_type;
  _percent_complete_type percent_complete;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _urposf_type;
  _urposf_type urposf;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _f1_type;
  _f1_type f1;





  typedef boost::shared_ptr< ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct UrDemoFeedback_

typedef ::p_robot_learning_demo::UrDemoFeedback_<std::allocator<void> > UrDemoFeedback;

typedef boost::shared_ptr< ::p_robot_learning_demo::UrDemoFeedback > UrDemoFeedbackPtr;
typedef boost::shared_ptr< ::p_robot_learning_demo::UrDemoFeedback const> UrDemoFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator1> & lhs, const ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.percent_complete == rhs.percent_complete &&
    lhs.urposf == rhs.urposf &&
    lhs.f1 == rhs.f1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator1> & lhs, const ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace p_robot_learning_demo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e39a61614b37725ac045743ec1a3657c";
  }

  static const char* value(const ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe39a61614b37725aULL;
  static const uint64_t static_value2 = 0xc045743ec1a3657cULL;
};

template<class ContainerAllocator>
struct DataType< ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "p_robot_learning_demo/UrDemoFeedback";
  }

  static const char* value(const ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define a feedback message\n"
"float32 percent_complete\n"
"float64[] urposf\n"
"float64[] f1\n"
"\n"
;
  }

  static const char* value(const ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.percent_complete);
      stream.next(m.urposf);
      stream.next(m.f1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UrDemoFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::p_robot_learning_demo::UrDemoFeedback_<ContainerAllocator>& v)
  {
    s << indent << "percent_complete: ";
    Printer<float>::stream(s, indent + "  ", v.percent_complete);
    s << indent << "urposf[]" << std::endl;
    for (size_t i = 0; i < v.urposf.size(); ++i)
    {
      s << indent << "  urposf[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.urposf[i]);
    }
    s << indent << "f1[]" << std::endl;
    for (size_t i = 0; i < v.f1.size(); ++i)
    {
      s << indent << "  f1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.f1[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // P_ROBOT_LEARNING_DEMO_MESSAGE_URDEMOFEEDBACK_H
