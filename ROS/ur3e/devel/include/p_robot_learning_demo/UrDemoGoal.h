// Generated by gencpp from file p_robot_learning_demo/UrDemoGoal.msg
// DO NOT EDIT!


#ifndef P_ROBOT_LEARNING_DEMO_MESSAGE_URDEMOGOAL_H
#define P_ROBOT_LEARNING_DEMO_MESSAGE_URDEMOGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace p_robot_learning_demo
{
template <class ContainerAllocator>
struct UrDemoGoal_
{
  typedef UrDemoGoal_<ContainerAllocator> Type;

  UrDemoGoal_()
    : action_id(0)
    , mode_id(0)
    , urpos()
    , gripper_val()  {
    }
  UrDemoGoal_(const ContainerAllocator& _alloc)
    : action_id(0)
    , mode_id(0)
    , urpos(_alloc)
    , gripper_val(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _action_id_type;
  _action_id_type action_id;

   typedef uint32_t _mode_id_type;
  _mode_id_type mode_id;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _urpos_type;
  _urpos_type urpos;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _gripper_val_type;
  _gripper_val_type gripper_val;





  typedef boost::shared_ptr< ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator> const> ConstPtr;

}; // struct UrDemoGoal_

typedef ::p_robot_learning_demo::UrDemoGoal_<std::allocator<void> > UrDemoGoal;

typedef boost::shared_ptr< ::p_robot_learning_demo::UrDemoGoal > UrDemoGoalPtr;
typedef boost::shared_ptr< ::p_robot_learning_demo::UrDemoGoal const> UrDemoGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator1> & lhs, const ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator2> & rhs)
{
  return lhs.action_id == rhs.action_id &&
    lhs.mode_id == rhs.mode_id &&
    lhs.urpos == rhs.urpos &&
    lhs.gripper_val == rhs.gripper_val;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator1> & lhs, const ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace p_robot_learning_demo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e2e647b480d85b93a63fd7219d610b0";
  }

  static const char* value(const ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e2e647b480d85b9ULL;
  static const uint64_t static_value2 = 0x3a63fd7219d610b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "p_robot_learning_demo/UrDemoGoal";
  }

  static const char* value(const ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"uint32 action_id  # Specify which dishwasher we want to use\n"
"uint32 mode_id\n"
"float64[] urpos\n"
"float64[] gripper_val\n"
;
  }

  static const char* value(const ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_id);
      stream.next(m.mode_id);
      stream.next(m.urpos);
      stream.next(m.gripper_val);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UrDemoGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::p_robot_learning_demo::UrDemoGoal_<ContainerAllocator>& v)
  {
    s << indent << "action_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.action_id);
    s << indent << "mode_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.mode_id);
    s << indent << "urpos[]" << std::endl;
    for (size_t i = 0; i < v.urpos.size(); ++i)
    {
      s << indent << "  urpos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.urpos[i]);
    }
    s << indent << "gripper_val[]" << std::endl;
    for (size_t i = 0; i < v.gripper_val.size(); ++i)
    {
      s << indent << "  gripper_val[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gripper_val[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // P_ROBOT_LEARNING_DEMO_MESSAGE_URDEMOGOAL_H
