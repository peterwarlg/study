// Generated by gencpp from file p_robot_learning_demo/UrDemoResult.msg
// DO NOT EDIT!


#ifndef P_ROBOT_LEARNING_DEMO_MESSAGE_URDEMORESULT_H
#define P_ROBOT_LEARNING_DEMO_MESSAGE_URDEMORESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace p_robot_learning_demo
{
template <class ContainerAllocator>
struct UrDemoResult_
{
  typedef UrDemoResult_<ContainerAllocator> Type;

  UrDemoResult_()
    : action_done(0)
    , rurpos()
    , rf1()  {
    }
  UrDemoResult_(const ContainerAllocator& _alloc)
    : action_done(0)
    , rurpos(_alloc)
    , rf1(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _action_done_type;
  _action_done_type action_done;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _rurpos_type;
  _rurpos_type rurpos;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _rf1_type;
  _rf1_type rf1;





  typedef boost::shared_ptr< ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator> const> ConstPtr;

}; // struct UrDemoResult_

typedef ::p_robot_learning_demo::UrDemoResult_<std::allocator<void> > UrDemoResult;

typedef boost::shared_ptr< ::p_robot_learning_demo::UrDemoResult > UrDemoResultPtr;
typedef boost::shared_ptr< ::p_robot_learning_demo::UrDemoResult const> UrDemoResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator1> & lhs, const ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator2> & rhs)
{
  return lhs.action_done == rhs.action_done &&
    lhs.rurpos == rhs.rurpos &&
    lhs.rf1 == rhs.rf1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator1> & lhs, const ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace p_robot_learning_demo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3444c2c0ad381ffdf4a9aeaec324987c";
  }

  static const char* value(const ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3444c2c0ad381ffdULL;
  static const uint64_t static_value2 = 0xf4a9aeaec324987cULL;
};

template<class ContainerAllocator>
struct DataType< ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "p_robot_learning_demo/UrDemoResult";
  }

  static const char* value(const ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the result\n"
"uint32 action_done\n"
"float64[] rurpos\n"
"float64[] rf1\n"
;
  }

  static const char* value(const ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_done);
      stream.next(m.rurpos);
      stream.next(m.rf1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UrDemoResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::p_robot_learning_demo::UrDemoResult_<ContainerAllocator>& v)
  {
    s << indent << "action_done: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.action_done);
    s << indent << "rurpos[]" << std::endl;
    for (size_t i = 0; i < v.rurpos.size(); ++i)
    {
      s << indent << "  rurpos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rurpos[i]);
    }
    s << indent << "rf1[]" << std::endl;
    for (size_t i = 0; i < v.rf1.size(); ++i)
    {
      s << indent << "  rf1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rf1[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // P_ROBOT_LEARNING_DEMO_MESSAGE_URDEMORESULT_H
